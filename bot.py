import sys
import os
import requests
import asyncio
import logging
import random
from threading import Thread
from wsgiref.simple_server import make_server
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç–æ–π WSGI-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Render
def simple_wsgi_app(environ, start_response):
    status = '200 OK'
    headers = [('Content-type', 'text/plain; charset=utf-8')]
    start_response(status, headers)
    return [b"Bot is running"]

# –ê–¥—Ä–µ—Å Jetton-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ $TAC
JETTON_ADDRESS = "EQBE_gBrU3mPI9hHjlJoR_kYyrhQgyCFD6EUWfa42W8T7EBP"

# –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
message_counters = {}

# –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö URL-–∞–¥—Ä–µ—Å–æ–≤ GIF
GIF_URLS = [
    "https://media4.giphy.com/media/v1.Y2lkPTZjMDliOTUybWZuczh5b285dmhhYTNzZjZzZXVvb3M1NnYydW92MnJmMjZnaWN1cyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/83JLhFcYedwQBR0oW5/giphy.gif",  # —Ç—É–∑–µ–º—É–Ω
    "https://media1.giphy.com/media/v1.Y2lkPTZjMDliOTUyYTZodGp6YWQ0eHJpZWtnNjBkNW51b2FhaHE5d3Q1MHB3cGJuOHB6eSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/nZW5fIzaIJVXddVla7/giphy.gif",  # –¢–∞–Ω—Ü—É—é—â–∏–π –∫–æ—Ç
    https://giphy.com/gifs/subpoprecords-breakfast-clowns-tv-priest-KNeeNrAQQqt0v8jvf9",  # –ö–ª–æ—É–Ω
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ TonAPI
def get_tac_price():
    url = f"https://tonapi.io/v2/rates?tokens={JETTON_ADDRESS}&currencies=ton,usd"
    headers = {}
    tonapi_key = os.getenv("TONAPI_KEY")
    if tonapi_key:
        headers["Authorization"] = f"Bearer {tonapi_key}"
        logger.info(f"Using TONAPI_KEY: {tonapi_key[:5]}...")
    else:
        logger.error("TONAPI_KEY not set")
    try:
        response = requests.get(url, headers=headers)
        logger.info(f"TonAPI response status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            logger.info(f"TonAPI response: {data}")
            rates = data['rates'][JETTON_ADDRESS]['prices']
            usd_price = rates.get('USD', 'N/A')
            ton_price = rates.get('TON', 'N/A')
            usd_str = f"{float(usd_price):.4f}" if usd_price != 'N/A' else 'N/A'
            ton_str = f"{float(ton_price):.4f}" if ton_price != 'N/A' else 'N/A'
            return (
                f"<b>üå∏ $TAC Price:</b>\n"  # –†–æ–∑–æ–≤—ã–π (–∏–º–∏—Ç–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ üå∏)
                f"<b>üíö USD: ${usd_str}</b>\n"  # –ó–µ–ª–µ–Ω—ã–π (–∏–º–∏—Ç–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ üíö)
                f"<b>üîµ TON: {ton_str} TON</b>"  # –°–∏–Ω–∏–π (–∏–º–∏—Ç–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ üîµ)
            )
        else:
            error_msg = f"–û—à–∏–±–∫–∞ TonAPI: –ö–æ–¥ {response.status_code}"
            logger.error(error_msg)
            return error_msg
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ get_tac_price: {str(e)}"
        logger.error(error_msg)
        return error_msg

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ GIF
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    message_counters[chat_id] = message_counters.get(chat_id, 0) + 1
    logger.info(f"Message count for chat {chat_id}: {message_counters[chat_id]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ —Å—á–µ—Ç—á–∏–∫ 10
    if message_counters[chat_id] >= 10:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é GIF
        gif_url = random.choice(GIF_URLS)
        try:
            await context.bot.send_animation(chat_id=chat_id, animation=gif_url)
            logger.info(f"Sent GIF to chat {chat_id}: {gif_url}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            message_counters[chat_id] = 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF –≤ —á–∞—Ç {chat_id}: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É", callback_data="price")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ü–µ–Ω—ã $TAC. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:\n–¢–≤–æ–π chat_id: {update.message.chat_id}",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /price
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    price_message = get_tac_price()
    logger.info(f"Sending price to {update.message.chat_id}: {price_message}")
    keyboard = [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data="price")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(price_message, reply_markup=reply_markup, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.data == "price":
        price_message = get_tac_price()
        logger.info(f"Sending price to {query.message.chat_id}: {price_message}")
        keyboard = [[InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data="price")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(price_message, reply_markup=reply_markup, parse_mode="HTML")
    elif query.data == "help":
        await query.message.reply_text("–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã $TAC. –ò—Å–ø–æ–ª—å–∑—É–π /price –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É'.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
async def send_price_update(context: ContextTypes.DEFAULT_TYPE) -> None:
    price_message = get_tac_price()
    chat_id = "-1002954606074"  # –¢–≤–æ–π chat_id –∫–∞–Ω–∞–ª–∞
    logger.info(f"Sending auto-update to {chat_id}: {price_message}")
    try:
        await context.bot.send_message(chat_id=int(chat_id), text=price_message, parse_mode="HTML")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞
        message_counters[chat_id] = message_counters.get(chat_id, 0) + 1
        if message_counters[chat_id] >= 10:
            gif_url = random.choice(GIF_URLS)
            await context.bot.send_animation(chat_id=int(chat_id), animation=gif_url)
            logger.info(f"Sent GIF to channel {chat_id}: {gif_url}")
            message_counters[chat_id] = 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_price_update: {str(e)}")

def run_wsgi():
    port = int(os.getenv("PORT", 8080))
    logger.info(f"Starting WSGI server on port {port}")
    server = make_server('0.0.0.0', port, simple_wsgi_app)
    server.serve_forever()

async def main():
    logger.info(f"Starting bot with Python {sys.version} and python-telegram-bot 21.4")
    application = Application.builder().token("7376596629:AAEWq1wQY03ColQcciuXxa7FmCkxQ4MUs7E").build()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.ALL, handle_message))  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ job_queue –¥–æ—Å—Ç—É–ø–µ–Ω
    if application.job_queue is None:
        logger.error("Error: job_queue is None")
        return
    application.job_queue.run_repeating(send_price_update, interval=180, first=0)
    # –ó–∞–ø—É—Å–∫–∞–µ–º WSGI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    wsgi_thread = Thread(target=run_wsgi, daemon=True)
    wsgi_thread.start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        await application.start()
        await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
        await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    except Exception as e:
        logger.error(f"Error in run_polling: {str(e)}")
        raise
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await application.updater.stop()
        await application.stop()
        await application.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"Error in main: {str(e)}")